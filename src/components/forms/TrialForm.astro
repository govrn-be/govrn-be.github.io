---
import FormSuccess from "./FormSuccess.astro";

// Add type declaration for intl-tel-input
declare global {
  interface Window {
    intlTelInput: any;
    grecaptcha: any;
  }
}

const TRIAL_API_URL =
  import.meta.env.TRIAL_API_URL || "http://localhost:8081/public/trial";
const RECAPTCHA_EXECUTE_KEY =
  import.meta.env.RECAPTCHA_EXECUTE_KEY ||
  "6LfV-TwrAAAAAC5iJ7BMz5JoCKYHRRPCa16_Ic6E";

interface Props {
  reasons?: string[];
  labels?: {
    firstName: string;
    lastName: string;
    email: string;
    company: string;
    phone: string;
    reason: string;
    submit: string;
    termsText: string;
    termsLink: string;
    privacyLink: string;
  };
  defaultReasons?: string[];
  successTitle?: string;
  successMessage?: string;
  selectReasonText?: string;
  termsUrl?: string;
  privacyUrl?: string;
}

const {
  reasons = [
    "Evaluating Board Management Solutions",
    "Starting a New Board",
    "Switching from Another Platform",
    "Improving Board Efficiency",
    "Other",
  ],
  labels = {
    firstName: "First Name",
    lastName: "Last Name",
    email: "Work Email",
    company: "Company Name",
    phone: "Phone Number",
    reason: "Reason for Trial",
    submit: "Start Now",
    termsText: "By signing up, you agree to our",
    termsLink: "Terms of Service",
    privacyLink: "Privacy Policy",
  },
  successTitle = "Welcome to Govrn!",
  successMessage = "Your trial account is being set up. Check your email for login instructions.",
  selectReasonText = "Select a reason",
  termsUrl = "/terms",
  privacyUrl = "/privacy",
} = Astro.props;
---

<form id="trialForm" class="space-y-6">
  <div class="grid grid-cols-2 gap-6">
    <div>
      <label
        for="firstName"
        class="block text-sm font-medium text-gray-700 mb-2"
      >
        {labels.firstName}
      </label>
      <input
        type="text"
        id="firstName"
        name="firstName"
        class="w-full px-4 py-3 rounded-lg border border-gray-300 focus:ring-2 focus:ring-primary focus:border-primary"
        required
      />
    </div>
    <div>
      <label
        for="lastName"
        class="block text-sm font-medium text-gray-700 mb-2"
      >
        {labels.lastName}
      </label>
      <input
        type="text"
        id="lastName"
        name="lastName"
        class="w-full px-4 py-3 rounded-lg border border-gray-300 focus:ring-2 focus:ring-primary focus:border-primary"
        required
      />
    </div>
  </div>

  <div>
    <label for="email" class="block text-sm font-medium text-gray-700 mb-2">
      {labels.email}
    </label>
    <input
      type="email"
      id="email"
      name="email"
      class="w-full px-4 py-3 rounded-lg border border-gray-300 focus:ring-2 focus:ring-primary focus:border-primary"
      required
    />
  </div>

  <div>
    <label for="company" class="block text-sm font-medium text-gray-700 mb-2">
      {labels.company}
    </label>
    <input
      type="text"
      id="company"
      name="company"
      class="w-full px-4 py-3 rounded-lg border border-gray-300 focus:ring-2 focus:ring-primary focus:border-primary"
      required
    />
  </div>

  <div class="w-full">
    <label for="phone" class="block text-sm font-medium text-gray-700 mb-2">
      {labels.phone}
    </label>
    <div class="phone-input-container w-full">
      <input
        type="tel"
        id="phone"
        name="phone"
        class="w-full px-4 py-3 rounded-lg border border-gray-300 focus:ring-2 focus:ring-primary focus:border-primary"
        required
      />
    </div>
  </div>
  <span id="phone-error" class="hidden text-red-500 text-sm mt-1"
    >Please enter a valid phone number</span
  >

  <div>
    <label for="reason" class="block text-sm font-medium text-gray-700 mb-2">
      {labels.reason}
    </label>
    <select
      id="reason"
      name="reason"
      class="w-full px-4 py-3 rounded-lg border border-gray-300 focus:ring-2 focus:ring-primary focus:border-primary"
      required
    >
      <option value="">{selectReasonText}</option>
      {reasons.map((reason) => <option value={reason}>{reason}</option>)}
    </select>
  </div>
  
  </div>
  <button
    type="submit"
    id="submitButton"
    class="w-full px-6 py-4 bg-primary text-white rounded-lg hover:bg-primary/90 transition-colors duration-200 font-medium flex items-center justify-center space-x-2 disabled:opacity-50 disabled:cursor-not-allowed"
  >
    <span id="buttonText">{labels.submit}</span>
    <svg
      id="buttonArrow"
      class="w-5 h-5"
      fill="none"
      stroke="currentColor"
      viewBox="0 0 24 24"
    >
      <path
        stroke-linecap="round"
        stroke-linejoin="round"
        stroke-width="2"
        d="M13 7l5 5m0 0l-5 5m5-5H6"></path>
    </svg>
    <svg
      id="buttonLoader"
      class="animate-spin h-5 w-5 hidden"
      xmlns="http://www.w3.org/2000/svg"
      fill="none"
      viewBox="0 0 24 24"
    >
      <circle
        class="opacity-25"
        cx="12"
        cy="12"
        r="10"
        stroke="currentColor"
        stroke-width="4"></circle>
      <path
        class="opacity-75"
        fill="currentColor"
        d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"
      ></path>
    </svg>
  </button>

  <p class="text-sm text-gray-500 text-center">
    {labels.termsText}
    <a href={termsUrl} class="text-primary hover:text-primary/90"
      >{labels.termsLink}</a
    >
    and
    <a href={privacyUrl} class="text-primary hover:text-primary/90"
      >{labels.privacyLink}</a
    >.
  </p>
  
</form>

<div id="formSuccess" class="hidden">
  <FormSuccess title={successTitle} message={successMessage} />
</div>

<link
  rel="stylesheet"
  href="https://cdnjs.cloudflare.com/ajax/libs/intl-tel-input/17.0.8/css/intlTelInput.css"
/>
<script
  src="https://cdnjs.cloudflare.com/ajax/libs/intl-tel-input/17.0.8/js/intlTelInput.min.js"
></script>
<script
  src="https://cdnjs.cloudflare.com/ajax/libs/intl-tel-input/17.0.8/js/utils.js"
></script>

<style is:global>
  /* Make the phone input container take full width */
  .iti {
    display: block;
    width: 100%;
  }

  /* Style the phone input to match other form fields */
  .iti__tel-input,
  .iti input {
    width: 100% !important;
    border-radius: 0.5rem !important;
    border: 1px solid rgb(209, 213, 219) !important;
    padding: 0.75rem 1rem !important;
    padding-left: 90px !important;
    font-size: 1rem !important;
    line-height: 1.5 !important;
  }

  .iti input:focus {
    outline: none !important;
    border-color: rgb(99, 102, 241) !important;
    box-shadow: 0 0 0 2px rgba(99, 102, 241, 0.2) !important;
  }

  /* Style the flag container */

  .iti__selected-flag {
    border-radius: 0.5rem 0 0 0.5rem !important;
    transition: all 0.2s ease !important;
    background-color: rgb(249, 250, 251) !important;
    height: 100% !important;
  }

  .iti__selected-flag:hover,
  .iti__selected-flag:focus {
    background-color: rgb(239, 246, 255) !important;
    border-radius: 0.5rem 0 0 0.5rem !important;
  }

  .iti__country-list {
    border-radius: 0.5rem !important;
    border: 1px solid rgb(229, 231, 235) !important;
    box-shadow: 0 4px 6px -1px rgb(0 0 0 / 0.1) !important;
  }

  .iti__country.iti__highlight,
  .iti__country:hover,
  .iti__country.iti__active {
    background-color: rgb(239, 246, 255) !important;
  }
</style>

<script define:vars={{ TRIAL_API_URL, RECAPTCHA_EXECUTE_KEY }}>
  document.addEventListener("DOMContentLoaded", () => {
    const form = document.getElementById("trialForm");
    const success = document.getElementById("formSuccess");
    const buttonText = document.getElementById("buttonText");
    const buttonArrow = document.getElementById("buttonArrow");
    const buttonLoader = document.getElementById("buttonLoader");
    const submitButton = document.getElementById(
      "submitButton",
        );
    const phoneError = document.getElementById("phone-error");

    // Initialize phone input with modified options
    const phoneInput = window.intlTelInput(
      document.getElementById("phone"),
      {
        utilsScript:
          "https://cdnjs.cloudflare.com/ajax/libs/intl-tel-input/17.0.8/js/utils.js",
        preferredCountries: ["be", "fr", "nl", "gb", "ch", "dk"],
        separateDialCode: true,
        initialCountry: "be",
        autoPlaceholder: "aggressive",
        formatOnDisplay: true,
        customContainer: "w-full",
      },
    );

    // Add input event listener for real-time validation
    const phoneElement = document.getElementById("phone");
    phoneElement?.addEventListener("blur", () => {
      if (phoneInput.isValidNumber()) {
        phoneError?.classList.add("hidden");
      } else {
        phoneError?.classList.remove("hidden");
      }
    });

    form?.addEventListener("submit", async (e) => {
      e.preventDefault();

      // Validate phone number
      if (!phoneInput.isValidNumber()) {
        phoneError?.classList.remove("hidden");
        return;
      }

      // Show loader and disable button
      buttonArrow?.classList.add("hidden");
      buttonLoader?.classList.remove("hidden");
      if (submitButton) submitButton.disabled = true;

      try {
        window.grecaptcha.enterprise.ready(async () => {
          const token = await window.grecaptcha.enterprise.execute(
            RECAPTCHA_EXECUTE_KEY,
            { action: "TRIAL_SUBMIT" },
          );

          const formData = new FormData(form);

          const payload = {
            firstName: formData.get("firstName"),
            lastName: formData.get("lastName"),
            email: formData.get("email"),
            organizationName: formData.get("company"),
            phoneNumber: phoneInput.getNumber(),
            reason: formData.get("reason"),
            recaptchaToken: token,
          };

          const response = await fetch(
            TRIAL_API_URL,
            {
              method: "POST",
              headers: {
                "Content-Type": "application/json",
              },
              body: JSON.stringify(payload),
            },
          );

          if (!response.ok) {
            throw new Error("Failed to submit trial request");
          }
          const email = formData.get('email');
          
          var myNewName = window.dataLayer || [];
          myNewName.push({'email': email});

          form.classList.add("hidden");
          success?.classList.remove("hidden");
        });
      } catch (error) {
        console.error("Error submitting form:", error);
        alert(
          "There was an issue submitting your trial request. Please try again later.",
        );

        buttonArrow?.classList.remove("hidden");
        buttonLoader?.classList.add("hidden");
        if (submitButton) submitButton.disabled = false;
      }
    });
  });
</script>
